function test1

P = 10;
Q = 3;

a_true = randn(P, Q);
b_true = randn(Q, Q, Q)+sqrt(-1)*randn(Q, Q, Q);
b_true = b_true./norm(vec(b_true));

B = tprod(a_true, [3 -1], tprod(a_true, [2 -1], tprod(a_true, [1 -1], b_true, [-1 2 3]), [1 -1 3]), [1 2 -1]);


a_init = randn(P, Q);
b_init = randn(Q, Q, Q);
x0 = [vec(a_init); vec(b_init)];
% x0 = [vec(a_true); vec(b_true)];

opts = optimset('Algorithm','levenberg-marquardt','Display','on', 'Jacobian', 'on', 'DerivativeCheck', 'off');

tic
[x resnorm] = lsqnonlin(@(x) myfun(x), x0, [], [], opts);
toc

a_est = real(reshape(x(1:P*Q), P, Q));
b_est = reshape(x((P*Q+1):end), [Q Q Q]);

norm(vec(B-tprod(a_est, [3 -1], tprod(a_est, [2 -1], tprod(a_est, [1 -1], b_est, [-1 2 3]), [1 -1 3]), [1 2 -1])))/norm(vec(B))

subspace(a_true, a_est)

keyboard

function [F J] = myfun(x)

a = real(reshape(x(1:P*Q), P, Q));
b = reshape(x((P*Q+1):end), [Q Q Q]);

F = (vec(B-tprod(a, [3 -1], tprod(a, [2 -1], tprod(a, [1 -1], b, [-1 2 3]), [1 -1 3]), [1 2 -1])));

J = zeros(P^3, P*Q+Q^3);

% tic
for qq = 1:Q
  aba1(:, :, qq) = a*squeeze(b(qq, :, :))*a';
end
for qq = 1:Q
  aba2(:, :, qq) = a*squeeze(b(:, qq, :))*a';
end
for qq = 1:Q
  aba3(:, :, qq) = a*squeeze(b(:, :, qq))*a';
end
% toc

% tic
da = zeros(P, P, P, P, Q);
for p1 = 1:P
  for p2 = 1:P
    for p3 = 1:P
      for p4 = 1:P
          if p4 == p1
            da(p1, p2, p3, p4, :) = squeeze(da(p1, p2, p3, p4, :)) + squeeze(aba1(p2, p3, :));
          end
%           if p4 == p2
%             da(p1, p2, p3, p4, :) = squeeze(da(p1, p2, p3, p4, :)) + squeeze(aba2(p1, p3, :));
%           end
%           if p4 == p3
%             da(p1, p2, p3, p4, :) = squeeze(da(p1, p2, p3, p4, :)) + squeeze(aba3(p1, p2, :)) ;
%           end
      end
    end
  end
end
% toc

da2 = da;

% tic
da = zeros(P, P, P, P, Q);
for p1 = 1:P
    if p4 == p1
      da(p1, :, :, p4, :) = squeeze(da(p1, :, :, p4, :)) + squeeze(aba1);
    end
  end
end
% toc


% keyboard

J(:, 1:P*Q) = -reshape(da, P^3, P*Q);

J(:, (P*Q+1):end) = -kron(kron(a, a), a);

end

function F = myfun2(x)

a = real(reshape(x(1:P*Q), P, Q));
b = reshape(x((P*Q+1):end), [Q Q Q]);

no = norm(vec(b));
b = b ./ no;
a = a.*no.^(1/3);

F = vec(B-tprod(a, [3 -1], tprod(a, [2 -1], tprod(a, [1 -1], b, [-1 2 3]), [1 -1 3]), [1 2 -1]));

% keyboard

end

end
